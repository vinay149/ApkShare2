<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.2.1">

    <issue
        id="GradleCompatible"
        severity="Fatal"
        message="All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes). Found versions 28.0.0, 27.1.1, 26.1.0. Examples include `com.android.support:animated-vector-drawable:28.0.0` and `com.android.support:customtabs:27.1.1`"
        category="Correctness"
        priority="8"
        summary="Incompatible Gradle Versions"
        explanation="There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your `targetSdkVersion`)."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/build.gradle"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit ();"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/service/MyFirebaseInstanceIdService.java"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    if (user.getPackInfo ().toLowerCase().contains(constraint.toString().toLowerCase())) {"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/Adapter/CustomAdaper.java"
            line="56"
            column="45"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    if (user.getPackInfo ().toLowerCase().contains(constraint.toString().toLowerCase())) {"
        errorLine2="                                                                                         ~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/Adapter/CustomAdaper.java"
            line="56"
            column="90"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/SplashActivity.kt"
            line="19"
            column="27"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/SplashActivity.kt"
            line="20"
            column="25"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.naming.directory`. Referenced from `io.grpc.internal.DnsNameResolver.JndiResolver`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/vinay/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-core/1.12.0/541a5c68ce85c03190e29bc9e0ec611d2b75ff24/grpc-core-1.12.0.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.naming`. Referenced from `io.grpc.internal.DnsNameResolver.JndiResolver`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/vinay/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-core/1.12.0/541a5c68ce85c03190e29bc9e0ec611d2b75ff24/grpc-core-1.12.0.jar"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): android.view.Window#setStatusBarColor"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        window.setStatusBarColor(ContextCompat.getColor(this, R.color.red))"
        errorLine2="               ~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/SplashActivity.kt"
            line="21"
            column="16"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support.test:runner than 1.0.1 is available: 1.0.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    androidTestImplementation &apos;com.android.support.test:runner:1.0.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/build.gradle"
            line="70"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support.test.espresso:espresso-core than 3.0.1 is available: 3.0.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/build.gradle"
            line="74"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.airbnb.android:lottie than 1.5.3 is available: 2.7.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &quot;com.airbnb.android:lottie:1.5.3&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/build.gradle"
            line="76"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.firebase:firebase-inappmessaging-display than 17.0.4 is available: 17.0.5"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.google.firebase:firebase-inappmessaging-display:17.0.4&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/build.gradle"
            line="79"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                android:textSize=&quot;16dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="33"
            column="17"/>
    </issue>

    <issue
        id="ExportedService"
        severity="Warning"
        message="Exported service does not require permission"
        category="Security"
        priority="5"
        summary="Exported service does not require permission"
        explanation="Exported services (services which either set `exported=true` or contain an intent-filter and do not specify `exported=false`) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service."
        errorLine1="        &lt;service android:name=&quot;.service.MyMessigingService&quot;>"
        errorLine2="         ~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/AndroidManifest.xml"
            line="36"
            column="10"/>
    </issue>

    <issue
        id="ExportedService"
        severity="Warning"
        message="Exported service does not require permission"
        category="Security"
        priority="5"
        summary="Exported service does not require permission"
        explanation="Exported services (services which either set `exported=true` or contain an intent-filter and do not specify `exported=false`) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service."
        errorLine1="        &lt;service"
        errorLine2="         ~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/AndroidManifest.xml"
            line="41"
            column="10"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="On SDK version 23 and up, your app data will be automatically backed up, and restored on app install. Your GCM regid will not work across restores, so you must ensure that it is excluded from the back-up set. Use the attribute `android:fullBackupContent` to specify an `@xml` resource which configures which files to backup. More info: https://developer.android.com/training/backup/autosyncapi.html"
        category="Security"
        priority="3"
        summary="AllowBackup/FullBackupContent Problems"
        explanation="The `allowBackup` attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup&#xA;&#xA;By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.&#xA;&#xA;This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.&#xA;&#xA;Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.&#xA;&#xA;To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`.&#xA;&#xA;If not set to false, and if targeting API 23 or later, lint will also warn that you should set `android:fullBackupContent` to configure auto backup."
        url="https://developer.android.com/training/backup/autosyncapi.html"
        urls="https://developer.android.com/training/backup/autosyncapi.html,http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="    &lt;application"
        errorLine2="     ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/AndroidManifest.xml"
            line="10"
            column="6"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `ApkDetailsDataBaseBuilder` which has field `context` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        private var mInstanceDataBase: ApkDetailsDataBaseBuilder? = null"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/database/ApkDetailsDataBaseBuilder.kt"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (com.myapp.vinay.apkshare.MainActivity.loadApkList)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    inner class loadApkList : AsyncTask&lt;Void, Void, Void>() {"
        errorLine2="                ~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/java/com/myapp/vinay/apkshare/MainActivity.kt"
            line="245"
            column="17"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/red` with a theme that also paints a background (inferred theme is `@style/SplashTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/red&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/activity_splash.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.raw.background` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/raw/background.json"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.colorPrimary` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        errorLine1="    &lt;color name=&quot;colorPrimary&quot;>#84a4f5&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/values/colors.xml"
            line="3"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.colorPrimaryDark` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        errorLine1="    &lt;color name=&quot;colorPrimaryDark&quot;>#5573be&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/values/colors.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.blue` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        errorLine1="    &lt;color name=&quot;blue&quot;>#FF6280F9&lt;/color>"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/values/colors.xml"
            line="7"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.mipmap.ic_launcher` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        errorLine1="&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;>"
        errorLine2="^"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml"
            line="2"
            column="1"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-hdpi/ic_launcher.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-mdpi/ic_launcher.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xhdpi/ic_launcher.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxhdpi/ic_launcher.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.lauch` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/lauch.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable-v24/lauch.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.raw.load` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/raw/load.json"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.raw.loading` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/raw/loading.json"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.raw.loading_animation` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/raw/loading_animation.json"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Action Bar icons should use a single gray color (`#333333` for light themes (with 60%/30% opacity for enabled/disabled), and `#FFFFFF` with opacity 80%/30% for dark themes"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable-v24/search.png"/>
    </issue>

    <issue
        id="IconDipSize"
        severity="Warning"
        message="The image `icons.png` varies significantly in its density-independent (dip) size across the various density versions: mipmap-hdpi/icons.png: 67x67 dp (100x100 px), mipmap-mdpi/icons.png: 100x100 dp (100x100 px), mipmap-xhdpi/icons.png: 50x50 dp (100x100 px)"
        category="Usability:Icons"
        priority="5"
        summary="Icon density-independent size validation"
        explanation="Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (`dip`) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xhdpi/icons.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-hdpi/icons.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-mdpi/icons.png"/>
    </issue>

    <issue
        id="IconDipSize"
        severity="Warning"
        message="The image `share.png` varies significantly in its density-independent (dip) size across the various density versions: mipmap-hdpi/share.png: 341x341 dp (512x512 px), mipmap-mdpi/share.png: 512x512 dp (512x512 px), mipmap-xhdpi/share.png: 256x256 dp (512x512 px), mipmap-xxhdpi/share.png: 171x171 dp (512x512 px), mipmap-xxxhdpi/share.png: 128x128 dp (512x512 px)"
        category="Usability:Icons"
        priority="5"
        summary="Icon density-independent size validation"
        explanation="Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (`dip`) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxxhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-hdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-mdpi/share.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `icons.png` icon has identical contents in the following configuration folders: mipmap-hdpi, mipmap-mdpi, mipmap-xhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xhdpi/icons.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-mdpi/icons.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-hdpi/icons.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `lauch.png` icon has identical contents in the following configuration folders: drawable-v24, drawable"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/lauch.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable-v24/lauch.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `search.png` icon has identical contents in the following configuration folders: drawable-v24, drawable"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/search.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable-v24/search.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `share.png` icon has identical contents in the following configuration folders: mipmap-hdpi, mipmap-mdpi, mipmap-xhdpi, mipmap-xxhdpi, mipmap-xxxhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxxhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xxhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-xhdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-mdpi/share.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/mipmap-hdpi/share.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `splash.png` icon has identical contents in the following configuration folders: drawable-v24, drawable"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/splash.png"/>
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable-v24/splash.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/lauch.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/lauch.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/search.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/search.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/splash.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/drawable/splash.png"/>
    </issue>

    <issue
        id="GoogleAppIndexingWarning"
        severity="Warning"
        message="App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. See issue explanation for more details."
        category="Usability"
        priority="5"
        summary="Missing support for Firebase App Indexing"
        explanation="Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search."
        url="https://g.co/AppIndexing/AndroidStudio"
        urls="https://g.co/AppIndexing/AndroidStudio"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/AndroidManifest.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="     ~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/activity_splash.xml"
            line="9"
            column="6"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="22"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="51"
            column="14"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="        android:clickable=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/activity_main.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;ApkShare&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;ApkShare&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/activity_splash.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;TextView&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                android:text=&quot;TextView&quot;/>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="41"
            column="17"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;TextView&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                android:text=&quot;TextView&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="48"
            column="17"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Search&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="     android:title=&quot;Search&quot;"
        errorLine2="     ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/menu/main_menu.xml"
            line="5"
            column="6"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Invite your friends&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="     android:title=&quot;Invite your friends&quot;"
        errorLine2="     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/menu/main_menu.xml"
            line="10"
            column="6"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Share&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Share&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="17"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Cancel&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Cancel&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Share apk &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Share apk &quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="57"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Share play store link&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Share play store link&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Pick your options&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Pick your options&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="88"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_alignParentRight=&quot;true&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_alignParentEnd=&quot;true&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="55"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginRight=&quot;0dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_marginEnd=&quot;0dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="57"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginLeft=&quot;74dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginStart=&quot;74dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="13"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginRight=&quot;34dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginEnd=&quot;34dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginLeft=&quot;185dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginStart=&quot;185dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="30"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginLeft=&quot;144dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginStart=&quot;144dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="84"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should **also** add `android:layout_marginRight=&quot;133dp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginEnd=&quot;133dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/share_dailog.xml"
            line="86"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toEndOf=&quot;@+id/appImage&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_toRightOf=&quot;@+id/appImage&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="37"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_toEndOf=&quot;@+id/appImage&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_toRightOf=&quot;@+id/appImage&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/vinay/Downloads/Android-PWA-Wrapper-master (1)/ApkShare2/app/src/main/res/layout/apk_item.xml"
            line="44"
            column="17"/>
    </issue>

</issues>
